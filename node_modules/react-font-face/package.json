{
  "_args": [
    [
      {
        "raw": "react-font-face",
        "scope": null,
        "escapedName": "react-font-face",
        "name": "react-font-face",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/jordanklaers/Documents/Galvanize job Search/brandzooka/todos"
    ]
  ],
  "_from": "react-font-face@latest",
  "_id": "react-font-face@0.2.1",
  "_inCache": true,
  "_location": "/react-font-face",
  "_nodeVersion": "8.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-font-face-0.2.1.tgz_1497384421646_0.8602837414946407"
  },
  "_npmUser": {
    "name": "ojdx",
    "email": "jeremy@ojdx.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {
    "create-react-class": "15.6.0",
    "isomorphic-fetch": "2.2.1",
    "loose-envify": "1.3.1",
    "promise": "7.3.1",
    "prop-types": "15.5.10",
    "setimmediate": "1.0.5",
    "ua-parser-js": "0.7.14"
  },
  "_requested": {
    "raw": "react-font-face",
    "scope": null,
    "escapedName": "react-font-face",
    "name": "react-font-face",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-font-face/-/react-font-face-0.2.1.tgz",
  "_shasum": "118afb66aaf98093e842bdc17b9d0982ec28a54f",
  "_shrinkwrap": null,
  "_spec": "react-font-face",
  "_where": "/Users/jordanklaers/Documents/Galvanize job Search/brandzooka/todos",
  "author": {
    "name": "ojdx"
  },
  "bugs": {
    "url": "https://github.com/ojdx/react-font-face/issues"
  },
  "dependencies": {
    "prop-types": "^15.5.10",
    "react": "^15.5.4",
    "react-dom": "^15.5.4",
    "react-helmet": "^5.1.3"
  },
  "description": "@font-face handler for component developer",
  "devDependencies": {
    "@storybook/react": "^3.1.3",
    "babel-cli": "^6.24.1",
    "babel-core": "^6.25.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-polyfill": "^6.23.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.11.1",
    "babel-preset-stage-0": "^6.24.1"
  },
  "directories": {},
  "dist": {
    "shasum": "118afb66aaf98093e842bdc17b9d0982ec28a54f",
    "tarball": "https://registry.npmjs.org/react-font-face/-/react-font-face-0.2.1.tgz"
  },
  "gitHead": "fdaaab2b4097d24d59b50d25d6441b2599cef017",
  "homepage": "https://github.com/ojdx/react-font-face#readme",
  "license": "UNLICENSED",
  "main": "lib/react-font-face.js",
  "maintainers": [
    {
      "name": "jasonrpoteet",
      "email": "jasonrpoteet@gmail.com"
    },
    {
      "name": "markehost",
      "email": "mark.e.host@gmail.com"
    },
    {
      "name": "ojdx",
      "email": "jeremy@ojdx.com"
    },
    {
      "name": "uenostation",
      "email": "rappagariya@gmail.com"
    }
  ],
  "name": "react-font-face",
  "optionalDependencies": {},
  "readme": "# React Font Face \r\n\r\nThis package is a higher order component you can use in your React components to use custom fonts, icon fonts or Google imported fonts.  This HOC uses [react-helmet](https://github.com/nfl/react-helmet) to inject the font-face declarations into the head in an efficient and consolidated manner.  \r\n\r\n### Why?\r\n\r\nReact components should be truly modular.  Where this falls apart is when you use custom fonts.  Yes, we can use SVG's to replace icon fonts but we still need to use custom fonts on occasion, which forces us to use global CSS in a React application.  This feels weird to still maintain a global stylesheet just for font declarations.  \r\n\r\nThis component allows you to package custom fonts with your component and easily use the component in a project with the expected style rendered.\r\n\r\n### Usage\r\n\r\nInstall and save to your environment use the terminal. \r\n\r\n```bash\r\nnpm install react-font-face --save\r\n```\r\n\r\nImport the package in your app. \r\n\r\n\r\nWrap your component in the higher order component where ever you export the component.  You will also need to pass in an config object using Google Fonts, your own font files or both.\r\n\r\n```js\r\nimport ReactFontFace from 'react-font-face'\r\n// SHOWS IMPORT OF LOCAL FILE\r\nimport bangersFont from './Bangers-Regular.ttf'\r\n\r\n// BUILD YOUR STYLES\r\nconst styles = {\r\n  main: {\r\n    margin: 15,\r\n    lineHeight: 1.4,\r\n    fontFamily: 'Bangers',\r\n  },\r\n  google1: {\r\n    fontFamily: 'Pangolin',\r\n  },\r\n  google2: {\r\n    fontFamily: 'Roboto Mono',\r\n  },\r\n};\r\n\r\n// THE ACTUAL COMPONENT\r\nclass ExampleStyledComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={styles.main}>\r\n        <p>Custom font from main style.</p>\r\n        <p style={ styles.google1 }>Custom Font from first google style.</p>\r\n        <p style={ styles.google2 }>Custom Font from second google style.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// CONFIG OBJECT TO PASS TO HOC\r\nlet fontConfig = {\r\n  google: [\r\n    'Pangolin',\r\n    'Roboto Mono',\r\n    \r\n    // MORE FONTS IN THE ARRAY\r\n    ...\r\n  ],\r\n  file: [\r\n    {\r\n      fontFamily: 'Bangers',\r\n      fontStyle:  'normal',\r\n      fontWeight: 400,\r\n      unicodeRange: 'U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215',\r\n      file: bangersFont,\r\n      fontType: 'truetype',\r\n      fileLocal: 'Bangers Regular'\r\n    },\r\n    \r\n    // MORE FONTS IN THE ARRAY\r\n    ...\r\n  ],\r\n}\r\n\r\n// WRAP THE EXPORTED COMPONENT \r\nexport default ReactFontFace(ExampleStyledComponent, fontConfig);\r\n```\r\n\r\n\r\n\r\n\r\n### Development\r\n\r\nTo test it out the package locally, pull the repo and run storybook.\r\n\r\n```bash\r\n$ git clone https://github.com/ojdx/react-font-face.git\r\n$ cd /react-font-face\r\n$ npm install\r\n$ npm run storybook\r\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ojdx/react-font-face.git"
  },
  "scripts": {
    "build-storybook": "build-storybook",
    "compile": "babel -d lib/ src/",
    "prepublish": "npm run compile",
    "storybook": "start-storybook -p 6006",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.2.1"
}
